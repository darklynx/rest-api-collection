###########################################################
#
#  Description of Dropbox Core API
#
#  License: MIT (see http://choosealicense.com/licenses/mit/)
#  Author: Vladimir Lyubitelev
#
swagger: '2.0'

# Description
info:
  version: 1.0.0
  title: Dropbox Content API
  description: |
      The **Content API** is a part of [Dropbox Core API](https://www.dropbox.com/developers/core/docs) that has a
      separate enpoint for content related operations: `https://api-content.dropbox.com`

      Please refer to Dropbox **Core API** document if you are interested in tokens management, account information,
      metadata retrieval or file operations.
  termsOfService: https://www.dropbox.com/developers/reference/tos
  contact:
    name: Dropbox
    url: https://www.dropbox.com/developers

host: api-content.dropbox.com
basePath: /1
schemes:
  - https

# Groups and their descriptions
tags:
  - name: files
    description: Files content management

# Security
securityDefinitions:
  dropbox_auth:
    description: |
        See Dropbox [OAuth official Guide](https://www.dropbox.com/developers/reference/oauthguide) and
        [Short Example](https://blogs.dropbox.com/developers/2013/07/using-oauth-2-0-with-the-core-api)
    type: oauth2
    authorizationUrl: https://www.dropbox.com/1/oauth2/authorize
    flow: implicit

# URL patterns
paths:
  /files/{root}/{path}:
    get:
      tags:
        - files
      produces:
        - application/octet-stream
      summary: Downloads a file.
      description: |
          Downloads a file.

          This method also supports [HTTP Range Retrieval Requests](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2)
          to allow retrieving partial file contents.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The path to the file you want to retrieve.
        - name: rev
          in: query
          type: string
          required: false
          description: The revision of the file to retrieve. This defaults to the most recent revision.
      responses:
        200:
          description: |
              The specified file's contents at the requested revision.

              The HTTP response contains the [content metadata](https://www.dropbox.com/developers/core/docs#metadata-details)
              in JSON format within an `x-dropbox-metadata` header.
        401:
          description: |
              Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix,
              you should re-authenticate the user.
          schema:
            $ref: '#/definitions/ErrorMessage'
        404:
          description: The file wasn't found at the specified path, or wasn't found at the specified `rev`.
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - dropbox_auth: []

  /files_put/{root}/{path}:
    put:
      tags:
        - files
      consumes:
        - application/octet-stream
        - text/plain
      produces:
        - application/json
      summary: Uploads a file using PUT semantics.
      description: |
          Uploads a file using PUT semantics.

          The preferred HTTP method for this call is **PUT**. For compatibility with browser environments, the **POST**
          HTTP method is also recognized.

          **Note:** Providing a `Content-Length` header set to the size of the uploaded file is required so that the
          server can verify that it has received the entire file contents.

          **Note:** `/files_put` has a maximum file size limit of 150 MB and does not support uploads with chunked
          encoding. To upload larger files, use [/chunked_upload](https://www.dropbox.com/developers/core/docs#chunked-upload)
          instead.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The full path to the file you want to write to. This parameter should *not* point to a folder.
        - name: locale
          in: query
          type: string
          required: false
          description: The metadata returned on successful upload will have its `size` field translated based on the given locale.
        - name: overwrite
          in: query
          type: string
          required: false
          description: |
              This value, either `true` (default) or `false`, determines whether an existing file will be overwritten
              by this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters
              determine whether a conflict occurs and how that conflict is resolved.
        - name: parent_rev
          in: query
          type: string
          required: false
          description: |
              If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the
              latest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will
              occur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).
              You can get the most recent rev by performing a call to [/metadata](https://www.dropbox.com/developers/core/docs#metadata).
        - name: autorename
          in: query
          type: string
          required: false
          description: |
              This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,
              the file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might
              be automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.
              If `false`, the call will fail with a 409 (Conflict) response code.
        - name: file_content
          in: body
          type: string
          required: true
          description: |
              The file contents to be uploaded. Since the entire PUT body will be treated as the file, any parameters
              must be passed as part of the request URL. The request URL should be signed just as you would sign any
              other OAuth request URL.
      responses:
        200:
          description: |
              The metadata for the uploaded file. More information on the returned metadata fields are
              available [here](https://www.dropbox.com/developers/core/docs#metadata-details).
          schema:
            $ref: '#/definitions/FileMetadata'
        401:
          description: |
              Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix,
              you should re-authenticate the user.
          schema:
            $ref: '#/definitions/ErrorMessage'
        409:
          description: |
              The call failed because a conflict occurred. This means a file already existed at the specified path,
              `overwrite` was false, and the `parent_rev` (if specified) didn't match the current `rev`.
          schema:
            $ref: '#/definitions/ErrorMessage'
        411:
          description: Missing `Content-Length` header (this endpoint doesn't support HTTP chunked transfer encoding).
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - dropbox_auth: []

    post:
      tags:
        - files
      consumes:
        - application/octet-stream
        - text/plain
      produces:
        - application/json
      summary: Uploads a file using PUT semantics.
      description: |
          Uploads a file using PUT semantics.

          The preferred HTTP method for this call is **PUT**. For compatibility with browser environments, the **POST**
          HTTP method is also recognized.

          **Note:** Providing a `Content-Length` header set to the size of the uploaded file is required so that the
          server can verify that it has received the entire file contents.

          **Note:** `/files_put` has a maximum file size limit of 150 MB and does not support uploads with chunked
          encoding. To upload larger files, use [/chunked_upload](https://www.dropbox.com/developers/core/docs#chunked-upload)
          instead.
      parameters:
        - name: root
          in: path
          type: string
          enum: [ 'auto', 'sandbox', 'dropbox' ]
          required: true
          description: |
              Root folder: `auto` - automatically determines the appropriate root folder using your app's permission
              level (recommended); `sandbox` - the codename for app folder level; `dropbox` - full dropbox access.
        - name: path
          in: path
          type: string
          required: true
          description: The full path to the file you want to write to. This parameter should *not* point to a folder.
        - name: locale
          in: query
          type: string
          required: false
          description: The metadata returned on successful upload will have its `size` field translated based on the given locale.
        - name: overwrite
          in: query
          type: string
          required: false
          description: |
              This value, either `true` (default) or `false`, determines whether an existing file will be overwritten
              by this upload. If `true`, any existing file will be overwritten. If `false`, the other parameters
              determine whether a conflict occurs and how that conflict is resolved.
        - name: parent_rev
          in: query
          type: string
          required: false
          description: |
              If present, this parameter specifies the revision of the file you're editing. If `parent_rev` matches the
              latest version of the file on the user's Dropbox, that file will be replaced. Otherwise, a conflict will
              occur. If you specify a `parent_rev` and that revision doesn't exist, the file won't save (error 400).
              You can get the most recent rev by performing a call to [/metadata](https://www.dropbox.com/developers/core/docs#metadata).
        - name: autorename
          in: query
          type: string
          required: false
          description: |
              This value, either `true` (default) or `false`, determines what happens when there is a conflict. If `true`,
              the file being uploaded will be automatically renamed to avoid the conflict. (For example, `test.txt` might
              be automatically renamed to `test (1).txt`.) The new name can be obtained from the returned metadata.
              If `false`, the call will fail with a 409 (Conflict) response code.
        - name: file_content
          in: body
          type: string
          required: true
          description: |
              The file contents to be uploaded. Since the entire PUT body will be treated as the file, any parameters
              must be passed as part of the request URL. The request URL should be signed just as you would sign any
              other OAuth request URL.
      responses:
        200:
          description: |
              The metadata for the uploaded file. More information on the returned metadata fields are
              available [here](https://www.dropbox.com/developers/core/docs#metadata-details).
          schema:
            $ref: '#/definitions/FileMetadata'
        401:
          description: |
              Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix,
              you should re-authenticate the user.
          schema:
            $ref: '#/definitions/ErrorMessage'
        409:
          description: |
              The call failed because a conflict occurred. This means a file already existed at the specified path,
              `overwrite` was false, and the `parent_rev` (if specified) didn't match the current `rev`.
          schema:
            $ref: '#/definitions/ErrorMessage'
        411:
          description: Missing `Content-Length` header (this endpoint doesn't support HTTP chunked transfer encoding).
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - dropbox_auth: []

# Model
definitions:
  ErrorMessage:
    required:
      - error
    properties:
      error:
        type: string
        description: Error description

  FileMetadata:
    required:
      - size
      - bytes
      - path
      - is_dir
      - rev
      - thumb_exists
      - icon
      - mime_type
      - modified
      - root
      - revision
    properties:
      size:
        type: string
        description: A human-readable description of the file size (translated by [locale](https://www.dropbox.com/developers/core/docs#param.locale))
      bytes:
        type: integer
        format: int64
        description: The file size in bytes
      path:
        type: string
        description: Returns the canonical path to the file or folder
      is_dir:
        type: boolean
        description: Whether the given entry is a folder or not
      is_deleted:
        type: boolean
        description: Whether the given entry is deleted (only included if deleted files are being returned)
      rev:
        type: string
        description: |
            A unique identifier for the current revision of a file; this field is the same `rev` as elsewhere in
            the API and can be used to detect changes and avoid conflicts.
      thumb_exists:
        type: boolean
        description: |
            `true` if the file is an image that can be converted to a thumbnail via the
            [/thumbnails](https://www.dropbox.com/developers/core/docs#thumbnails) call
      icon:
        type: string
        description: |
            The name of the icon used to illustrate the file type in Dropbox's
            [icon library](https://www.dropbox.com/static/images/dropbox-api-icons.zip)
      mime_type:
        type: string
        description: MIME type of a file
      modified:
        type: string
        description: |
            The last time the file was modified on Dropbox, in the standard
            [date format](https://www.dropbox.com/developers/core/docs#date-format) (not included for the root folder)
      root:
        type: string
        description: |
            The root or top-level folder depending on your [access level](https://www.dropbox.com/developers/reference/devguide#app-permissions);
            all paths returned are relative to this root level; permitted values are either `dropbox` or `app_folder`
      revision:
        type: integer
        description: A **deprecated** field that semi-uniquely identifies a file; use `rev` instead
